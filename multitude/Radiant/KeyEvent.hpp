/* COPYRIGHT
 *
 * This file is part of Radiant.
 *
 * Copyright: MultiTouch Oy, Helsinki University of Technology and others.
 *
 * See file "Radiant.hpp" for authors and more details.
 *
 * This file is licensed under GNU Lesser General Public
 * License (LGPL), version 2.1. The LGPL conditions can be found in 
 * file "LGPL.txt" that is distributed with this source package or obtained 
 * from the GNU organization (www.gnu.org).
 * 
 */
#ifndef RADIANT_KEY_EVENT_HPP
#define RADIANT_KEY_EVENT_HPP

#include <Radiant/Export.hpp>

#include <Nimble/Vector2.hpp>

#include <QEvent>
#include <QString>

class QKeyEvent;
class QMouseEvent;

namespace Radiant
{
  class RADIANT_API KeyEvent
  {
  public:
    /// Constructs a new key event from a QKeyEvent
    /// @param event Qt key event
    KeyEvent(const QKeyEvent & event);

    /// Constructs a new key event
    /// @param key key code of the event (from Qt::Key)
    /// @param type type of the event. Must be KeyPress or KeyRelease.
    /// @param modifiers active keyboard modifiers for the event
    /// @param text Unicode representation of the text generated by the event
    KeyEvent(int key, QEvent::Type type = QEvent::KeyPress,
             Qt::KeyboardModifiers modifiers = Qt::NoModifier, const QString & text = "");

    virtual ~KeyEvent();

    /// @cond
    // Not currently used, always returns false
    bool virtualEvent() const;
    /// @endcond

    /// Key code of the event (from Qt::Key)
    /// @return key code
    int key() const;

    /// Active keyboard modifiers
    /// @return bit field of active modifiers
    Qt::KeyboardModifiers modifiers() const;

    /// Returns boolean indicating a repeating event
    /// @return true if this is a repeating event
    bool isAutoRepeat() const;

    /// Sets the repeating flag of the event
    /// @param isAutoRepeat true if the event is a repeating event
    void setAutoRepeat(bool isAutoRepeat);

    /// Returns the type of the keyboard event
    /// @return type of the event
    QEvent::Type type() const;

    /// Returns the unicode text representation of the key event
    QString text() const;

    /// Creates a key press KeyEvent object with the specified key code
    /// @param key key code of the event
    static KeyEvent createKeyPress(int key);

    /// Creates a key release KeyEvent object with the specified key code
    /// @param key key code of the event
    static KeyEvent createKeyRelease(int key);

  private:
    class D;
    D * m_d;
  };

  class RADIANT_API MouseEvent
  {
  public:

    MouseEvent(const QMouseEvent & event);
    MouseEvent(QEvent::Type type, const Nimble::Vector2i & pos, Qt::MouseButton button,
                Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
    virtual ~MouseEvent();

    int x() const;
    int y() const;

    QEvent::Type type() const;

    Qt::MouseButton button() const;
    Qt::MouseButtons buttons() const;

    Qt::KeyboardModifiers modifiers() const;

  private:
    class D;
    D * m_d;
  };
}

#endif
